
/**
 * All blend operations blend the result r together with the background layer using:
  Final pixel = opacity * (result of blendmode) + (1 - opacity) * background
 */
vec4 opCodeBlend() {
    if (opcode.inputCount != 3) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    vec4 foreground = getVec4Input(opcodes.code[opcode.index++]);
    vec4 background = getVec4Input(opcodes.code[opcode.index++]);
    float opacity = getFloatInput(opcodes.code[opcode.index++]);
    vec4 r;
    switch (opcode.param) {
        case 0: // r = x
            r = (opacity * foreground);
            break;
        case 1: // r = x + y 
            r = opacity * (foreground + background);
            break;
        case 2: // r = y - x 
            r = opacity * (background - foreground);
            break;
        case 3: // r = x * y 
            r = opacity * (foreground * background);
            break;
        case 4: // r = y / x 
            r = opacity * (background / foreground);
            break;
        case 5: // r = 1 - (1 - x) * (1 - y)
            r = opacity * (1.0 - (1.0 - foreground) * (1.0 - background));
            break;            
        case 6: // r = { max(x.x, y.x), max(x.y, y.y), max(x.z, y.z)}
            r = opacity * max(foreground, background);
            break;
        case 7: // r = { min(x.x, y.x), min(x.y, y.y), min(x.z, y.z)}
            r = opacity * min(foreground, background);
            break;
        default:
            TERMINATE
            return vec4(INVALID_PARAM, INVALID_PARAM, opcode.param / 255.0, INVALID_PARAM);
    
    };
    return r + ((1 - opacity) * background);
}
/*
struct control_point {
    float luminosity;
    vec4 color;
};
*/

vec4 opCodeColorize() {
    float inputData = getFloatInput(opcodes.code[opcode.index++]);
    vec4 result = vec4(inputData);
/*
    int num_control_points = opcodes.param;
    
    float* control_points = parameters[0].value_float_array_data;

    float epsilon = 1e-7f; // min divisor

    struct control_point low = { control_points[0], { control_points[1], control_points[2], control_points[3], control_points[4] } };
    for (int i = 0; i < num_control_points; ++i) {
        struct control_point high = { control_points[i * 5 + 0], { control_points[i * 5 + 1], control_points[i * 5 + 2], control_points[i * 5 + 3], control_points[i * 5 + 4] } };
        // bring the input to the range of the interpolation
        float interpolant = fmaxf(low.luminosity, fminf(high.luminosity, input));
        interpolant = (interpolant - low.luminosity) / fmaxf((high.luminosity - low.luminosity), epsilon);
        result = glms_vec4_lerp(low.color, high.color, interpolant);
        // we're in the last segment that applies to the input --> stop
        if (input < high.luminosity) {
            break;
        }
        low = high;
    }
*/

    return result;
}

vec4 opCodeGrayscaleConversion() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    vec4 inputs = getVec4Input(opcodes.code[opcode.index++]);
    vec4 weights = getVec4Input(opcodes.code[opcode.index++]);
    vec3 value = vec3(dot(inputs, weights));
    return vec4(value, 1.0);
}

vec4 opCodeLevels() {
    if (opcode.inputCount != 6) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    

    vec4 value = getVec4Input(opcodes.code[opcode.index++]);
    vec4 blackPoint = getVec4Input(opcodes.code[opcode.index++]);
    vec4 whitePoint = getVec4Input(opcodes.code[opcode.index++]);
    vec4 gamma = getVec4Input(opcodes.code[opcode.index++]);
    vec4 outputFrom = getVec4Input(opcodes.code[opcode.index++]);
    vec4 outputTo = getVec4Input(opcodes.code[opcode.index++]);

    
    value = clamp(value, blackPoint, whitePoint);
    vec4 inputRange = whitePoint - blackPoint;
    value = max(vec4(0), (value - blackPoint) / inputRange); 
    value = pow(value, gamma);
    
    return clamp(value * (outputTo - outputFrom) + outputFrom, vec4(0), vec4(1));
}


float glm_bezier(float s, float p0, float c0, float c1, float p1) {
  float x, xx, ss, xs3, a;

  x   = 1.0f - s;
  xx  = x * x;
  ss  = s * s;
  xs3 = (s - ss) * 3.0;
  a   = p0 * xx + c0 * xs3;

  return a + s * (c1 * xs3 + p1 * ss - a);
}


float bezier_first_derivative(float t, float c0, float c1, float c2, float c3) {
    float s = 1.0 - t;
    return 3.0 * s * s * (c1 - c0) + 6.0 * s * t * (c2 - c1) + 3.0 * t * t * (c3 - c2);
}

float evaluate_bezier_root(float a, vec2 c0, vec2 c1, vec2 c2, vec2 c3) {
    // Solve Bezier function for t so that B(t) = (x, y) using Newton's method
    
    float t = (a - c0.x) / (c3.x - c0.x); // initial guess
    float tolerance = 1e-4f; // desired accuracy
    float epsilon = 1e-7f; // min divisor
    uint max_iterations = 6;

    uint i;
    for (i = 0; i < max_iterations; ++i) {
        // evaluate bezier polynomial
        float y = glm_bezier(t, c0.x, c1.x, c2.x, c3.x) - a;
        float dy = bezier_first_derivative(t, c0.x, c1.x, c2.x, c3.x);

        if (abs(dy) < epsilon) {
            break;
        }

        float t_next = t - y / dy;

        if (abs(t_next - t) < tolerance) {
            // solution found
            break;
        }

        t = t_next;
    }

    // clamp to [0, 1]
    t = clamp(t, 0, 1);

    // Evaluate the Bezier curve for y
    return glm_bezier(t, c0.y, c1.y, c2.y, c3.y);
}


float evaluate_curve(float inputData, uint num_control_points, uint index) {
    uint num_segments = num_control_points / 4;

    // if the input falls outside of the curves specified bounds (on the x axis),
    // use the closest control point of the curve as the output value
    if (inputData < floatinputs.inputData[index]) {
        return floatinputs.inputData[index + 1];
    }
    if (inputData > floatinputs.inputData[index + ((num_segments - 1) * 8) + 6]) {
        return floatinputs.inputData[index + ((num_segments - 1) * 8) + 7];
    }

    // find the right segment in the control points
    uint segment = 0;
    for (; segment < num_segments; ++segment) {
        float low = floatinputs.inputData[index + segment * 8 + 0];
        float high = floatinputs.inputData[index + segment * 8 + 6];
        if (low <= inputData && inputData <= high) {
            break;
        }
    }
    // extract the control points for the segment
    vec2 c0 = vec2(floatinputs.inputData[index + segment * 8 + 0], floatinputs.inputData[index + segment * 8 + 1]);
    vec2 c1 = vec2(floatinputs.inputData[index + segment * 8 + 2], floatinputs.inputData[index + segment * 8 + 3]);
    vec2 c2 = vec2(floatinputs.inputData[index + segment * 8 + 4], floatinputs.inputData[index + segment * 8 + 5]);
    vec2 c3 = vec2(floatinputs.inputData[index + segment * 8 + 6], floatinputs.inputData[index + segment * 8 + 7]);
    // search for the input value in the bezier curve
    return evaluate_bezier_root(inputData, c0, c1, c2, c3);
}


vec4 opCodeCurve(uint controlPoints) {
    if (opcode.inputCount < 5 || opcode.inputCount > 5 + 3) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    vec4 inVec = getVec4Input(opcodes.code[opcode.index++]);
    if (opcode.inputCount == 8) {
        uint saveIndex = opcode.index;
        opcode.index += (5-1);
        inVec.xyz = transformInput(inVec.xyz);
        opcode.index = saveIndex;
    } 
    float[4] inputData = {inVec.x, inVec.y, inVec.z, inVec.w};
    float[4] outputData = {0, 0, 0, 0};
    uint channel = 0;
    for (channel = 0; channel < 4; channel++) {
        uint num_control_points = opcode.param;
        uint index = opcodes.code[opcode.index++];
        outputData[channel] = evaluate_curve(inputData[channel], num_control_points, index);
    }
    return vec4(outputData[0], outputData[1], outputData[2], outputData[3]);
}

vec4 opCodePosition(vec3 pos) {
    pos = vec3(settings.scale * pos) + settings.offset;
    if (opcode.inputCount == 3) {
        return vec4(transformInput(pos), 1);
    } else {
        return vec4(pos, 1.0);
    }
}

vec4 opCodeUniformColor() {
    if (opcode.inputCount != 1) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    return getVec4Input(opcodes.code[opcode.index++]);
}

vec4 opCodeNoise() {
    if (opcode.inputCount < 4 || opcode.inputCount > 4 + 3) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    
    vec3 x = getVec4Input(opcodes.code[opcode.index++]).xyz;
    int min_level = int(getFloatInput(opcodes.code[opcode.index++]));
    int max_level = int(getFloatInput(opcodes.code[opcode.index++]));
    float beta = getFloatInput(opcodes.code[opcode.index++]);
    if (opcode.inputCount == 7) {
        x = transformInput(x);
    } 

    // sanitize the input
    min_level = clamp(min_level, 1, min(max_level, 16));
    max_level = clamp(max_level, min_level, 16);

    // https://www.shadertoy.com/view/4dS3Wd
    // fractional brownian motion
    vec3 value = vec3(0.0);
    vec3 shift = vec3(100);
    // shift rgb channels so that they get different seeds of noise
    vec3 rgb_shift = vec3(0.0, 1459, 9133);
    float luminosity_correction = 0.0;

    float frequency = 1.0f;

    // skip the first min_level octaves
    int octave = 0;
    while (octave < min_level) {
        x = (2.0 * x) + shift;
        octave++;
    }

    // evaluate octaves
    octave = min_level;
    while (octave <= max_level) {
        // Apply noise with brownian falloff i.e. smaller amplitudes contribute
        // less to the final color.
        float amplitude = 1.0 / pow(frequency, beta);
        vec3 noise;
        noise.x = (perlin_noise(x + rgb_shift.x) + 1.0) / 2.0;
        noise.y = (perlin_noise(x + rgb_shift.y) + 1.0) / 2.0;
        noise.z = (perlin_noise(x + rgb_shift.z) + 1.0) / 2.0;
//        value = glms_vec3_add(value, glms_vec3_scale(noise, amplitude));
        value = value + (amplitude * noise);
        // Low octave counts can lead to a shift in the mean of the output
        // distribution of FBM --> correct this
        luminosity_correction += amplitude;
        // Each octave is evaluated on a different frequency, also shift the
        // position to avoid moir� patterns
//        x = glms_vec3_add(glms_vec3_scale(x, 2.0), shift);
        x = (2.0 * x) + shift;
        frequency *= 2.0;
        octave++;
    }

    value = value / luminosity_correction;
    return vec4(value, 1.0);
}

vec4 opCodeVoronoi() {
    if (opcode.inputCount < 2 || opcode.inputCount > 2 + 3) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    float randomness = clamp(getFloatInput(opcodes.code[opcode.index++]), 0.0, 1.0);
    vec3 position = getVec4Input(opcodes.code[opcode.index++]).xyz;
    if (opcode.inputCount > 2) {
        position = transformInput(position);
    } 

    // floor position to get a grid cell origin
    vec3 cell_origin = floor(position);

    // the output values
    vec3 closest_voronoi_point;
    float dist = INFINITY;

    // When calculating the closest voronoi point we must not only consider the
    // current cell but also the neighboring cells because the closest point could be in
    // one of the neighbors as well
    int k, j, i;
    for (k = -1; k <= 1; k++) {
        for (j = -1; j <= 1; j++) {
            for (i = -1; i <= 1; i++) {
                //glms_vec3_add(cell_origin, (vec3s) { (float)i, (float)j, (float)k });
                vec3 neighbor_origin = cell_origin + vec3(i, j, k);
                // sample the neighbors voronoi local point
                vec3 neighbor_voronoi_offset = random3(neighbor_origin);
                // scale with randomness (randomness == 0 --> regular grid)
                neighbor_voronoi_offset = neighbor_voronoi_offset * randomness;
                // bring neighbor local voronoi point to global space
                //glms_vec3_add(neighbor_origin, neighbor_voronoi_offset);
                vec3 neighbor_voronoi_point = neighbor_origin + neighbor_voronoi_offset;
                float dist_to_point = distance(neighbor_voronoi_point, position);
                
                // accept the new point if it's closer
                if (dist_to_point < dist) {
                    dist = dist_to_point;
                    closest_voronoi_point = neighbor_voronoi_point;
                }
            }
        }
    }
    return vec4(closest_voronoi_point, dist);
}

vec4 opCodeTransformTRS() {
    if (opcode.inputCount != 4) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    vec3 translation = getVec4Input(opcodes.code[opcode.index++]).xyz;
    vec3 rotation = getVec4Input(opcodes.code[opcode.index++]).xyz;
    vec3 scale = getVec4Input(opcodes.code[opcode.index++]).xyz;
    vec3 position = getVec4Input(opcodes.code[opcode.index++]).xyz;
    return vec4((position * scale) + translation, 1.0);
}

vec4 opCodeBlur() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    float intensity = clamp(getFloatInput(opcodes.code[opcode.index++]), 0.0, 1.0);
    vec3 inputData = getVec4Input(opcodes.code[opcode.index++]).xyz;
    return vec4(inputData, 1.0);
}


vec4 opCodeCombine() {
    if (opcode.inputCount != 4) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    float red = getFloatInput(opcodes.code[opcode.index++]);
    float green = getFloatInput(opcodes.code[opcode.index++]);
    float blue = getFloatInput(opcodes.code[opcode.index++]);
    float alpha = getFloatInput(opcodes.code[opcode.index++]);
    
    return vec4(red, green, blue, alpha);
}

vec4 opCodeSawtoothWave() {
    if (opcode.inputCount != 1) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    vec4 inputData = getVec4Input(opcodes.code[opcode.index++]);
    return vec4(fract(inputData.xyz), 1.0f);

}

vec4 opCodeL2Norm() {
    if (opcode.inputCount == 0 || opcode.inputCount > 4) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    vec3 inputData = getVec4Input(opcodes.code[opcode.index++]).xyz;
    if (opcode.inputCount == 4) {
        inputData = transformInput(inputData);
    } 
    return vec4(sqrt(dot(inputData, inputData)));
}

vec4 opCodeSubtract() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    vec4 minuend = getVec4Input(opcodes.code[opcode.index++]);
    vec4 subtrahend = getVec4Input(opcodes.code[opcode.index++]);
    return minuend - subtrahend;
}

vec4 opCodeDivide() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    vec3 dividend = getVec4Input(opcodes.code[opcode.index++]).xyz;
    vec3 divisor = getVec4Input(opcodes.code[opcode.index++]).xyz;
    
    return vec4(dividend / divisor, 1.0);
}


vec4 opCodeAdd() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }
    
    vec3 summand1 = getVec4Input(opcodes.code[opcode.index++]).xyz;
    vec3 summand2 = getVec4Input(opcodes.code[opcode.index++]).xyz;
    
    return vec4(summand1 + summand2, 1.0);
}

vec4 opCodeMultiply() {
    if (opcode.inputCount != 2) {
        TERMINATE
        return vec4(INVALID_INDEXCOUNT, INVALID_INDEXCOUNT, opcode.inputCount / 255.0, INVALID_INDEXCOUNT);
    }    
    vec4 factor1 = getVec4Input(opcodes.code[opcode.index++]);
    vec4 factor2 = getVec4Input(opcodes.code[opcode.index++]);

    return factor1 * factor2;
}
